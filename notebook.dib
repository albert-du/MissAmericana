#!markdown

# Miss Americana

#!fsharp

#load "Lyrics.fsx"
#r "nuget: Plotly.NET.Interactive, 3.0.0"
open Plotly.NET
open Plotly.NET.LayoutObjects 
open Lyrics

#!fsharp

let ``Taylor Swift albums`` = []
let ``Taylor lyrics`` = words "Taylor Swift" ``Taylor Swift albums``

#!fsharp

let ``Evermore lyrics`` = words "Taylor Swift" ["Evermore"]

#!fsharp

let ``Lorde albums`` = []
let ``Lorde lyrics`` = words "Lorde" ``Lorde albums``

#!fsharp

let ``Solar Power lyrics`` = words "Lorde" ["Solar Power"]

#!fsharp

Seq.take 100 ``Taylor lyrics``
|> Chart.Column
|> Chart.withTitle "Taylor Lyric Frequency"
|> Chart.withSize (1900, 800)
|> Chart.withXAxis (LinearAxis.init(Tick0=1, DTick=1, Title=Title.init(Text="Words")))
|> Chart.withYAxis (LinearAxis.init(Title=Title.init(Text="Reletive Frequency")))

#!fsharp

Seq.take 100 ``Lorde lyrics``
|> Chart.Column
|> Chart.withTitle "Lorde Lyric Frequency"
|> Chart.withSize (1900, 800)
|> Chart.withXAxis (LinearAxis.init(Tick0=1, DTick=1, Title=Title.init(Text="Words")))
|> Chart.withYAxis (LinearAxis.init(Title=Title.init(Text="Reletive Frequency")))

#!fsharp

// Now we compare them
let taylor =
    ``Taylor lyrics`` 
    |> dict

let taylorKeys = set taylor.Keys

let lorde =
    ``Lorde lyrics``
    |> dict

let lordeKeys = set lorde.Keys

let taylorUnique = 
    Set.difference taylorKeys lordeKeys
    |> Seq.map (fun x -> x, taylor[x])
    |> Seq.sortByDescending snd

let lordeUnique = 
    Set.difference lordeKeys taylorKeys
    |> Seq.map (fun x -> x, lorde[x])
    |> Seq.sortByDescending snd

Seq.take 100 taylorUnique
|> Chart.Column
|> Chart.withTitle "Frequency of words in Taylor Swift lyrics not found in Lorde lyrics"
|> Chart.withSize (1900, 800)
|> Chart.withXAxis (LinearAxis.init(Tick0=1, DTick=1, Title=Title.init(Text="Words")))
|> Chart.withYAxis (LinearAxis.init(Title=Title.init(Text="Reletive Frequency")))

#!fsharp

Seq.take 100 lordeUnique
|> Chart.Column
|> Chart.withTitle "Frequency of words in Lorde lyrics not found in Taylor Swift lyrics"
|> Chart.withSize (1900, 800)
|> Chart.withXAxis (LinearAxis.init(Tick0=1, DTick=1, Title=Title.init(Text="Words")))
|> Chart.withYAxis (LinearAxis.init(Title=Title.init(Text="Reletive Frequency")))

#!fsharp

let pronouns = set [ "i"; "you"; "he"; "she"; "they"; "we"]

let common =
    Set.intersectMany [taylorKeys; lordeKeys]
    |> Seq.sortByDescending (fun x -> taylor[x] - lorde[x] |> abs)
    |> Seq.take 100

let values =
    common
    |> Seq.map (fun x ->x, taylor[x], lorde[x])
    
[
    common
    |> Seq.map (fun x -> taylor[x], lorde[x])
    |> fun x -> Chart.Point(x, MultiText=common, TextPosition=StyleParam.TextPosition.MiddleRight, Name="Words")
    Chart.Line([-1., -1.; 1., 1.], Name="Lorde = Taylor")
    |> Chart.withLineStyle(Width=2,Dash=StyleParam.DrawingStyle.Dot)
]
|> Chart.combine
|> Chart.withSize (850, 850)
|> Chart.withXAxisStyle ("Taylor", MinMax = (0.,0.01))
|> Chart.withYAxisStyle ("Lorde", MinMax = (0.,0.01))
|> Chart.withTitle "Top 50 least common shared words between Taylor and Lorde"

#!fsharp

values

#!fsharp

Seq.take 100 ``Evermore lyrics``
|> Chart.Column
|> Chart.withTitle "Evermore Lyric Frequency"
|> Chart.withSize (1900, 800)
|> Chart.withXAxis (LinearAxis.init(Tick0=1, DTick=1, Title=Title.init(Text="Words")))
|> Chart.withYAxis (LinearAxis.init(Title=Title.init(Text="Reletive Frequency")))

#!fsharp

Seq.take 100 ``Solar Power lyrics``
|> Chart.Column
|> Chart.withTitle "Solar Power Lyric Frequency"
|> Chart.withSize (1900, 800)
|> Chart.withXAxis (LinearAxis.init(Tick0=1, DTick=1, Title=Title.init(Text="Words")))
|> Chart.withYAxis (LinearAxis.init(Title=Title.init(Text="Reletive Frequency")))

#!fsharp

let taylor =
    ``Evermore lyrics`` 
    |> dict

let taylorKeys = set taylor.Keys

let lorde =
    ``Solar Power lyrics``
    |> dict

let lordeKeys = set lorde.Keys

let all =
    Set.union taylorKeys lordeKeys
    |> Seq.sortBy (fun x -> 
        let t, l = (match taylor.TryGetValue(x) with true, c -> c | _ -> 0.), (match lorde.TryGetValue(x) with true, c -> c | _ -> 0.)
        (min t l) / (max t l))
    |> Seq.take 100

[
    all
    |> Seq.map (fun x -> (match taylor.TryGetValue(x) with true, c -> c | _ -> 0.), (match lorde.TryGetValue(x) with true, c -> c | _ -> 0.))
    |> fun x -> Chart.Point(x, MultiText=all, TextPosition=StyleParam.TextPosition.Auto, Name="Words")
    Chart.Line([-1., -1.; 1., 1.], Name="Solar Power = Evermore")
    |> Chart.withLineStyle(Width=2,Dash=StyleParam.DrawingStyle.Dot)
]
|> Chart.combine
|> Chart.withSize (1000, 1000)
|> Chart.withXAxisStyle ("Taylor", MinMax = (0.,0.011))
|> Chart.withYAxisStyle ("Lorde", MinMax = (0.,0.011))
|> Chart.withTitle "Top 50 least shared words between Solar Power and Evermore"

#!markdown

## Color Analysis

#!fsharp

let colors = ["red"; "orange"; "yellow"; "green"; "blue"; "indigo"; "violet"; "purple"; "pink"; "white"; "black"; "gray"; "grey"; "cyan"; "magenta"; "silver"; "gold"; "maroon"; "lime"; "teal"; "turqoise"; "beige"; "brown"; "tan"]

#!fsharp

let taylorColors = 
    colors
    |> Seq.map (fun x -> x, match taylor.TryGetValue x with true, c -> c | _ -> 0.)
    |> Seq.sortByDescending snd
    
taylorColors
|> Seq.takeWhile (fun (_, x) -> x <> 0.)

#!fsharp

let lordeColors = 
    colors
    |> Seq.map (fun x -> x, match lorde.TryGetValue x with true, c -> c | _ -> 0.)
    |> Seq.sortByDescending snd
lordeColors
|> Seq.takeWhile (fun (_, x) -> x <> 0.)

#!fsharp

taylorColors
|> Seq.sumBy snd

#!fsharp

lordeColors
|> Seq.sumBy snd

#!markdown

## Swearing Contest

#!fsharp

let swears = [
    "fuck"
    "shit"
    "bitch"
    "bitches"
    "damn"
    "hell"
    "dick"
    "ass"
]

#!fsharp

let taylorSwears = 
    swears
    |> Seq.map (fun x -> x, match taylor.TryGetValue x with true, c -> c | _ -> 0.)
    |> Seq.sortByDescending snd
    
taylorSwears
|> Seq.takeWhile (fun (_, x) -> x <> 0.)

#!fsharp

let lordeSwears = 
    swears
    |> Seq.map (fun x -> x, match lorde.TryGetValue x with true, c -> c | _ -> 0.)
    |> Seq.sortByDescending snd
    
lordeSwears
|> Seq.takeWhile (fun (_, x) -> x <> 0.)

#!fsharp

taylorSwears
|> Seq.sumBy snd

#!fsharp

lordeSwears
|> Seq.sumBy snd
